{"version":3,"sources":["actions/types.tsx","actions/MessageAction.tsx","actions/movieAction.tsx","components/SearchMovieInput.tsx","components/SearchResults.tsx","components/NominatedMovies.tsx","layout/Navbar.tsx","layout/Message.tsx","App.tsx","reportWebVitals.ts","reducers/UserReducers.ts","reducers/MovieReducer.ts","reducers/MessageReducer.ts","store/AppState.ts","store/configureStore.ts","theme/myTheme.tsx","index.tsx"],"names":["SEARCH_MOVIE","ADD_NOMINATION","REMOVE_NOMINATION","REMOVE_ALL_NOMINATION","MOVIE_ERROR","ADD_MESSAGE","REMOVE_MESSAGE","REFRESH_LOCAL_STORAGE","LOAD_NOMINATED_MOVIES","LOAD_NOMINATED_MOVIES_ERROR","AddMessage","message","alertType","dispatch","timeout","id","uuid","type","payload","setTimeout","getMovies","movieTitle","pageNum","a","axios","get","res","console","log","data","movieItems","map","mov","title","Title","yearOfLease","Year","poster","Poster","imdbID","newPageNum","totalResults","searchInput","msg","status","response","statusText","SearchMovieInput","useState","setMovieTitle","useDispatch","submitInput","event","preventDefault","style","margin","width","Fragment","Box","Card","marginTop","onSubmit","CardContent","Grid","container","item","lg","sm","xl","xs","TextField","required","label","fullWidth","InputProps","startAdornment","InputAdornment","position","SvgIcon","fontSize","color","onChange","target","value","placeholder","variant","Button","textTransform","float","SearchResults","_movies","useSelector","state","movies","nominations","pageSize","onClickNextPage","e","onClickPrePage","renderNominationButton","length","some","onClick","newNominatedMovie","addNomination","slot","textAlign","CardHeader","action","justifyContent","display","alignItems","Typography","align","Math","floor","IconButton","aria-label","Divider","List","index","ListItem","divider","ListItemAvatar","Avatar","src","ListItemText","primary","secondary","ListItemSecondaryAction","NominatedMovies","removeAllNomination","removeNomination","Navbar","AppBar","elevation","Toolbar","height","Icon","connect","messages","messageArray","props","_messages","useSnackbar","enqueueSnackbar","Container","className","App","useEffect","localStorage","nominatedMovies","nominated","JSON","parse","getItem","loadNominatedMovies","md","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","USER_TYPE","initialMovieState","movieSearched","movieNominated","error","initialMessageState","rootReducer","combineReducers","user","filter","setItem","stringify","msgObj","initialState","configureStore","createStore","composeWithDevTools","theme","createMuiTheme","palette","main","contrastText","background","default","paper","colors","common","white","text","typography","h1","fontWeight","letterSpacing","h2","h3","h4","h5","h6","overline","ReactDOM","render","StrictMode","store","maxSnack","ThemeProvider","document","getElementById"],"mappings":"mRAAaA,EAAe,eACfC,EAAiB,iBACjBC,EAAoB,oBACpBC,EAAwB,wBACxBC,EAAc,cACdC,EAAc,cACdC,EAAiB,iBAEjBC,EAAwB,wBACxBC,EAAwB,wBACxBC,EAA8B,8B,SCW9BC,EAAa,SAACC,EAAiBC,EAAwBC,GAAuE,IAApBC,EAAmB,uDAAT,IACvHC,EAAKC,cACXH,EAAS,CAELI,KAAMZ,EACNa,QAAS,CAACP,UAASC,YAAWG,QAIlCI,YAAW,kBAAMN,EAAS,CAACI,KAAMX,EAAgBY,QAASH,MAAMD,ICHvDM,EAAS,uCAAG,WAAOC,EAAoBC,EAAiBT,GAA5C,qBAAAU,EAAA,+EAECC,IAAMC,IAAN,qCAAwCJ,EAAxC,4CAAsFC,IAFvF,UAEXI,EAFW,OAGjBC,QAAQC,IAAIF,IACRA,EAAIG,KAAJ,OAJa,wBAKPC,EAAaJ,EAAIG,KAAJ,OAAmBE,KAAI,SAACC,GAAD,MAAe,CACrDC,MAAOD,EAAIE,MACXC,YAAaH,EAAII,KACjBC,OAAQL,EAAIM,OACZC,OAAQP,EAAIO,WAEVC,EAAalB,EACbmB,EAAef,EAAIG,KAAKY,aAE9B5B,EAAS,CACLI,KAAMjB,EACNkB,QAAS,CAACY,aAAYU,aAAYC,eAAcC,YAHhCrB,KAbP,UAkBPX,EAAW,6BAA8B,UAAWG,GAlB7C,gCAoBbA,EAAS,CACLI,KAAMb,EACNc,QAAS,CACLyB,IAAK,sCACLC,OAAQlB,EAAIkB,UAxBP,0DA6BjB/B,EAAS,CACLI,KAAMb,EACNc,QAAS,CACLyB,IAAK,KAAEE,SAASC,WAChBF,OAAQ,KAAEC,SAASD,UAjCV,0DAAH,0D,iGC6CPG,EAjEU,WACrB,MAAoCC,mBAAS,IAA7C,mBAAO3B,EAAP,KAAmB4B,EAAnB,KACMpC,EAAWqC,cAEXC,EAAW,uCAAG,WAAOC,GAAP,SAAA7B,EAAA,6DAChB6B,EAAMC,iBADU,SAEVjC,EAAUC,EAAY,EAAGR,GAFf,2CAAH,sDAKjB,OACI,qBAAKyC,MAAO,CAACC,OAAQ,OAAOC,MAAM,QAAlC,SACI,cAAC,IAAMC,SAAP,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAML,MAAO,CAACM,UAAW,QAAzB,SACI,sBAAMC,SAAUV,EAAhB,SACI,cAACW,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAvC,SACI,eAACX,EAAA,EAAD,CAAKJ,MAAO,CAACE,MAAO,QAApB,UACI,cAACc,EAAA,EAAD,CACIC,UAAQ,EACRC,MAAM,cACNC,WAAS,EACTC,WAAY,CACRC,eACI,cAACC,EAAA,EAAD,CAAgBC,SAAS,QAAzB,SACI,cAACC,EAAA,EAAD,CACIC,SAAS,QACTC,MAAM,SAFV,SAII,cAAC,IAAD,SAKhBC,SAAU,SAAC7B,GACPH,EAAcG,EAAM8B,OAAOC,QAE/BC,YAAY,iBACZC,QAAQ,WACRF,MAAO9D,IAEX,cAACiE,EAAA,EAAD,CAAQD,QAAQ,YAAYL,MAAM,UAAU/D,KAAK,SAASkE,MAAM,SACxD7B,MAAO,CACHiC,cAAe,OACfC,MAAO,OACP5B,UAAW,QAJvB,yBAQR,cAACG,EAAA,EAAD,UACI,cAACL,EAAA,EAAD,sB,6HCmEzB+B,EAvGO,WAClB,IAAMC,EAAUC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UACjDA,EAAuBH,EAAO,cAC9BI,EAA4BJ,EAAO,eACzC,EAAuDC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UAAvFvE,EAAP,EAAOA,QAASyE,EAAhB,EAAgBA,SAAUtD,EAA1B,EAA0BA,aAAcC,EAAxC,EAAwCA,YAClC7B,EAAWqC,cAEX8C,EAAe,uCAAG,WAAOC,GAAP,SAAA1E,EAAA,sEAIdH,EAAUsB,EAAapB,EAAU,EAAGT,GAJtB,2CAAH,sDAOfqF,EAAc,uCAAG,WAAOD,GAAP,SAAA1E,EAAA,sEACbH,EAAUsB,EAAapB,EAAU,EAAGT,GADvB,2CAAH,sDAIdsF,EAAyB,SAACnE,GAC5B,OAAI8D,EAAYM,OAAS,IAAMN,EAAYO,MAAK,SAACpC,GAC7C,OAAOA,EAAK1B,SAAWP,EAAIO,UAGvB,cAAC+C,EAAA,EAAD,CAAQD,QAAQ,YAAYL,MAAM,UAAU1B,MAAO,CAACiC,cAAe,QAC3De,QAAS,kBFoBJ,SAACC,EAA0B1F,GACpD,IACIA,EAAS,CACLI,KAAMhB,EACNiB,QAASqF,IAGb1F,EAAS,CACLI,KAAMV,EACNW,QAAS,KAGf,MAAO+E,GACLpF,EAAS,CACLI,KAAMb,EACNc,QAAS,CACLyB,IAAKsD,MEpCkBO,CAAcxE,EAAKnB,IAD1C,sBAIG,MAgBf,OACI,qBAAKyC,MAAO,CAACC,OAAQ,QAArB,SACI,cAAC,IAAME,SAAP,UACI,eAACE,EAAA,EAAD,CAAML,MAAO,CAACM,UAAW,QAAzB,UACI,qBAAK6C,KAAK,SAASnD,MAAO,CAACoD,UAAW,QAAtC,SACI,cAACC,EAAA,EAAD,CACI1E,MAjBA,KAAhBS,EACM,gBAAN,OAAuBA,EAAvB,KAEO,UAeSkE,OACI,sBAAKtD,MAAO,CAACuD,eAAgB,gBAAiBC,QAAS,QAAvD,UACI,qBAAKxD,MAAO,CACRwD,QAAS,OACTD,eAAgB,SAChBE,WAAY,UAHhB,SAKI,cAACC,EAAA,EAAD,CAAYC,MAAM,SAAlB,mBACQ3F,EADR,cACqB4F,KAAKC,MAAO1E,EAAesD,EAAY,GAD5D,cACoEtD,OAGxE,qBAAKa,MAAO,GAAZ,SACI,cAAC8D,EAAA,EAAD,CAAYpC,MAAM,UAAUsB,QAASJ,EAAgBmB,aAAW,WAAhE,SACI,cAAC,IAAD,QAGR,qBAAK/D,MAAO,GAAZ,SACI,cAAC8D,EAAA,EAAD,CAAYpC,MAAM,UAAUsB,QAASN,EAAiBqB,aAAW,YAAjE,SACI,cAAC,IAAD,eAOxB,cAACC,EAAA,EAAD,IACmB,IAAlBzB,EAAOO,QACJ,cAACmB,EAAA,EAAD,UACK1B,EAAO9D,KAAI,SAACC,EAAKwF,GAAN,OACR,eAACC,EAAA,EAAD,CACIC,QAASF,EAAQ3B,EAAOO,OAAS,EADrC,UAII,cAACuB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,IAAK7F,EAAIK,WAErB,cAACyF,EAAA,EAAD,CACIC,QAAS/F,EAAIC,MACb+F,UAAS,oBAAehG,EAAIG,eAEhC,cAAC8F,EAAA,EAAD,UACK9B,EAAuBnE,OAVvBA,EAAIO,qB,qBCjC9B2F,GAvDS,WACpB,IAAMxC,EAAUC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,UACjDhF,EAAWqC,cACX4C,EAA4BJ,EAAO,eAKzC,OACI,qBAAKpC,MAAO,CAACC,OAAQ,QAArB,SACI,cAAC,IAAME,SAAP,UACI,eAACE,EAAA,EAAD,CAAML,MAAO,CAACM,UAAW,QAAzB,UACI,cAAC+C,EAAA,EAAD,CAEI1E,MAAM,mBACNqB,MAAO,CAACoD,UAAW,QACnBE,OACI,8BACI,cAACQ,EAAA,EAAD,CAAYpC,MAAM,YAAYsB,QAdzB,YH2FF,SAACzF,GAChC,IACIA,EAAS,CACLI,KAAMd,EACNe,QAAS,OAGbL,EAAS,CACLI,KAAMV,EACNW,QAAS,KAEf,MAAO+E,GACLpF,EAAS,CACLI,KAAMb,EACNc,QAAS,CACLyB,IAAKsD,MGzGbkC,CAAoBtH,IAaqEwG,aAAW,QAA5E,SACI,cAAC,KAAD,UAMhB,cAACC,EAAA,EAAD,IACwB,IAAvBxB,EAAYM,QACT,cAACmB,EAAA,EAAD,UACKzB,EAAY/D,KAAI,SAACC,EAAKwF,GAAN,OACb,eAACC,EAAA,EAAD,CACIC,QAASF,EAAQ1B,EAAYM,OAAS,EAD1C,UAII,cAACuB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,IAAK7F,EAAIK,WAErB,cAACyF,EAAA,EAAD,CACIC,QAAS/F,EAAIC,MACb+F,UAAS,oBAAehG,EAAIG,eAEhC,cAAC8F,EAAA,EAAD,UACI,cAAC3C,EAAA,EAAD,CAAQD,QAAQ,YAAYL,MAAM,YAAY1B,MAAO,CAACiC,cAAe,QAC7De,QAAS,kBHgCzB,SAACC,EAA0B1F,GACvD,IACIA,EAAS,CACLI,KAAMf,EACNgB,QAASqF,IAGb1F,EAAS,CACLI,KAAMV,EACNW,QAAS,KAEf,MAAO+E,GACLpF,EAAS,CACLI,KAAMb,EACNc,QAAS,CACLyB,IAAKsD,MG/C0CmC,CAAiBpG,EAAKnB,IAD7C,wBAVCmB,EAAIO,qB,6DCzB9B8F,GAlBA,WACX,OACI,cAACC,GAAA,EAAD,CAAQzD,SAAS,SACT0D,UAAW,EADnB,SAGI,eAACC,GAAA,EAAD,CAASlF,MAAO,CAACmF,OAAQ,IAAzB,UACI,cAACC,GAAA,EAAD,UACI,cAAC,KAAD,MAGJ,cAAC1B,EAAA,EAAD,CAAY3B,QAAQ,KAAKL,MAAM,UAA/B,qC,SC8CD2D,gBANS,SAAC/C,GAAD,MACpB,CACIgD,SAAUhD,EAAMiD,gBAITF,EAjDC,SAACG,GACb,IAAMC,EAAYpD,aAAY,SAACC,GAAD,OAAqBA,EAAMgD,YACnDA,EAA8BG,EAAYA,EAAS,aAAmB,GAE5EpH,QAAQC,IAAI,WAAYgH,GACEI,eAAnBC,gBAEPtH,QAAQC,IAAI,aAMZ,OACI,8BACkB,OAAbgH,GAAqBA,EAASxC,OAAS,GAAM,8BACzCwC,EAAS7G,KAAI,SAACkC,EAAMuD,GACjB,OAAO,cAAC0B,GAAA,EAAD,UACH,qBAAmB5F,MAAO,CAACC,OAAQ,QAAS4F,UAAS,sBAAiBlF,EAAKrD,WAA3E,SACKqD,EAAKtD,SADAsD,EAAKlD,gBCiBxBqI,GA/BH,WACR,IAAMvI,EAAWqC,cAOjB,OALAmG,qBAAU,YNkHqB,SAACxI,GAChC,IACI,GAAIyI,aAAaC,gBAAiB,CAC9B,IAAMC,EAA0BC,KAAKC,MAAMJ,aAAaK,QAAQ,oBAAsB,MACtF9I,EAAS,CACLI,KAAMT,EACNU,QAASsI,KAGnB,MAAOvD,GACLpF,EAAS,CACLI,KAAMR,EACNS,QAAS,CACLyB,IAAKsD,MM9Hb2D,CAAoB/I,MAKpB,eAAC,IAAM4C,SAAP,WACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,eAACyF,GAAA,EAAD,CAAW5F,MAAO,CAACC,OAAQ,QAA3B,UACI,qBAAKD,MAAO,CAACuD,eAAgB,SAAUC,QAAS,QAAhD,SACI,cAAC,EAAD,MAEJ,qBAAKxD,MAAO,CAACuD,eAAgB,SAAUC,QAAS,QAAhD,SACI,eAAC/C,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACD,EAAA,EAAD,CAAME,MAAI,EAACG,GAAI,EAAGF,GAAI,EAAG2F,GAAI,EAAG1F,GAAI,GAAIE,GAAI,GAA5C,SACI,cAAC,EAAD,MAEJ,cAACN,EAAA,EAAD,CAAME,MAAI,EAACG,GAAI,EAAGF,GAAI,EAAG2F,GAAI,EAAG1F,GAAI,GAAIE,GAAI,GAA5C,SACI,cAAC,GAAD,kBCtBbyF,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,mBCTDQ,GAAY,Y,kBCgBnBC,GAAoB,CACtBC,cAAe,GACfC,eAAgB,GAChBhI,YAAa,GACbpB,QAAS,EACTyE,SAAU,GACVtD,aAAc,EACdkI,MAAO,ICjBLC,GAAsB,CACxB/B,aAAc,ICFLgC,GAAcC,2BAAgB,CACvCC,KHQuB,WAAiE,IAAhEnF,EAA+D,uDAA1C,KAAMgB,EAAoC,uCACvF,OAAQA,EAAO3F,MACX,KAAKsJ,GAED,OADA5I,QAAQC,IAAI,eAAgBgF,EAAO1F,SAC5B0F,EAAO1F,QAClB,QACI,OAAO0E,IGbfC,OFmBwB,WAAiE,IAAhED,EAA+D,uDAA3C4E,GAAmB5D,EAAwB,uCACjF3F,EAAiB2F,EAAjB3F,KAAMC,EAAW0F,EAAX1F,QAEb,OAAQD,GACJ,KAAKjB,EACD,OAAO,6BACA4F,GADP,IAEI6E,cAAevJ,EAAQY,WACvBR,QAASJ,EAAQsB,WACjBC,aAAcvB,EAAQuB,aACtBC,YAAaxB,EAAQwB,cAE7B,KAAKzC,EACD,OAAO,6BACA2F,GADP,IAEI8E,eAAe,GAAD,oBAAM9E,EAAM8E,gBAAZ,CAA4BxJ,MAElD,KAAKhB,EACD,OAAO,6BACA0F,GADP,IAEI8E,eAAgB9E,EAAM8E,eAAeM,QAAO,SAAChJ,GACrC,OAAOA,IAAQd,OAI/B,KAAKf,EACD,OAAO,6BACAyF,GADP,IAEI8E,eAAgB,KAExB,KAAKnK,EAED,OADA+I,aAAa2B,QAAQ,kBAAmBxB,KAAKyB,UAAUtF,EAAM8E,iBACtD9E,EACX,KAAKpF,EACD,OAAO,6BACAoF,GADP,IAEI8E,eAAgBxJ,IAExB,KAAKT,EACL,KAAKL,EACD,OAAO,6BACAwF,GADP,IAEI+E,MAAOzJ,IAEf,QACI,OAAO0E,IE/DfgD,SDE0B,WAAuF,IAAtFhD,EAAqF,uDAA/DgF,GAAqBhE,EAA0C,uCACzG3F,EAAiB2F,EAAjB3F,KAAMC,EAAW0F,EAAX1F,QAEb,OAAQD,GACJ,IAAK,cACD,OAAO,6BACA2E,GADP,IAEIiD,aAAa,GAAD,oBAAMjD,EAAMiD,cAAZ,CAA0B3H,MAE9C,IAAK,iBACD,OAAO,6BACA0E,GADP,IAEIiD,aAAcjD,EAAMiD,aAAamC,QAAO,SAACG,GACrC,OAAOA,EAAOpK,KAAOG,OAGjC,QACI,OAAO0E,MEvBbwF,GAAe,GAMNC,GAJQ,WACnB,OAAOC,uBAAYT,GAAaO,GAAaG,mC,mBCLpCC,GAAQC,aAAe,CAChCC,QAAS,CACL3D,QAAS,CACL4D,KAAM,UACNC,aAAc,QAElBC,WAAY,CACRC,QAAS,UACTC,MAAOC,KAAOC,OAAOC,OAEzBC,KAAM,CACFpE,QAAS,UACTC,UAAW,YAGnBoE,WAAY,CACRC,GAAI,CACAC,WAAY,IACZvH,SAAU,GACVwH,cAAe,WAEnBC,GAAI,CACAF,WAAY,IACZvH,SAAU,GACVwH,cAAe,WAEnBE,GAAI,CACAH,WAAY,IACZvH,SAAU,GACVwH,cAAe,WAEnBG,GAAI,CACAJ,WAAY,IACZvH,SAAU,GACVwH,cAAe,WAEnBI,GAAI,CACAL,WAAY,IACZvH,SAAU,GACVwH,cAAe,WAEnBK,GAAI,CACAN,WAAY,IACZvH,SAAU,GACVwH,cAAe,WAEnBM,SAAU,CACNP,WAAY,Q,UCtCxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUC,MAAO5B,KAAjB,SACI,cAAC,KAAD,CAAkB6B,SAAU,EAA5B,SACI,cAACC,GAAA,EAAD,CAAe3B,MAAOA,GAAtB,SACI,cAAC,GAAD,YAKhB4B,SAASC,eAAe,SAM5BvD,O","file":"static/js/main.e4ac7582.chunk.js","sourcesContent":["export const SEARCH_MOVIE = \"SEARCH_MOVIE\";\nexport const ADD_NOMINATION = \"ADD_NOMINATION\";\nexport const REMOVE_NOMINATION = \"REMOVE_NOMINATION\";\nexport const REMOVE_ALL_NOMINATION = \"REMOVE_ALL_NOMINATION\";\nexport const MOVIE_ERROR = \"MOVIE_ERROR\";\nexport const ADD_MESSAGE = \"ADD_MESSAGE\";\nexport const REMOVE_MESSAGE = \"REMOVE_MESSAGE\";\n\nexport const REFRESH_LOCAL_STORAGE = \"REFRESH_LOCAL_STORAGE\";\nexport const LOAD_NOMINATED_MOVIES = \"LOAD_NOMINATED_MOVIES\";\nexport const LOAD_NOMINATED_MOVIES_ERROR = \"LOAD_NOMINATED_MOVIES_ERROR\";","import {v4 as uuid} from \"uuid\";\nimport {Dispatch} from \"redux\";\nimport {ADD_MESSAGE, REMOVE_MESSAGE} from \"./types\";\nimport {VariantType} from \"notistack\";\n\nexport interface messageObj {\n    message: string,\n    alertType: VariantType,\n    id: string\n}\n\nexport interface addMsgAction {\n    type: string;\n    payload: messageObj,\n}\n\nexport interface closeMsgAction {\n    type: string,\n    payload: string,\n}\n\nexport const AddMessage = (message: string, alertType: VariantType, dispatch: Dispatch<addMsgAction | closeMsgAction>, timeout = 3000) => {\n    const id = uuid(); //generate a uuid for the new alert action.\n    dispatch({\n        //dispatch this new action to the reducer.\n        type: ADD_MESSAGE,\n        payload: {message, alertType, id},\n    });\n\n    //make the alert disappear by setting a timeout\n    setTimeout(() => dispatch({type: REMOVE_MESSAGE, payload: id}), timeout);\n}\n\nexport const CloseMessage = (messageId: string, dispatch: Dispatch<closeMsgAction>) => {\n    dispatch({\n        type: REMOVE_MESSAGE,\n        payload: messageId\n    })\n}\n\n","import axios from \"axios\";\nimport {Dispatch} from \"redux\";\n\nimport {\n    SEARCH_MOVIE,\n    ADD_NOMINATION,\n    REMOVE_NOMINATION,\n    MOVIE_ERROR,\n    REMOVE_ALL_NOMINATION,\n    LOAD_NOMINATED_MOVIES,\n    LOAD_NOMINATED_MOVIES_ERROR, REFRESH_LOCAL_STORAGE\n} from \"./types\";\nimport {AddMessage} from \"./MessageAction\";\n\nexport interface Movie {\n    title: string,\n    yearOfLease: number,\n    poster: string,\n    imdbID: string,\n}\n\ninterface myAction {\n    type: string,\n    payload: any | null,\n}\n\n//Get first ten movies based on the input movie title\nexport const getMovies = async (movieTitle: string, pageNum: number, dispatch: Dispatch<myAction>) => {\n    try {\n        const res = await axios.get(`https://www.omdbapi.com/?s=${movieTitle}&type=movie&apikey=9c01b986&page=${pageNum}`)\n        console.log(res)\n        if (res.data[\"Search\"]) {\n            const movieItems = res.data[\"Search\"].map((mov: any) => ({\n                title: mov.Title,\n                yearOfLease: mov.Year,\n                poster: mov.Poster,\n                imdbID: mov.imdbID\n            }));\n            const newPageNum = pageNum;\n            const totalResults = res.data.totalResults;\n            const searchInput = movieTitle;\n            dispatch({\n                type: SEARCH_MOVIE,\n                payload: {movieItems, newPageNum, totalResults, searchInput}\n            });\n            await AddMessage(\"Success get date from API@\", 'success', dispatch);\n        } else {\n            dispatch({\n                type: MOVIE_ERROR,\n                payload: {\n                    msg: \"Too many results. or invalid input!\",\n                    status: res.status,\n                },\n            });\n        }\n    } catch (e) {\n        dispatch({\n            type: MOVIE_ERROR,\n            payload: {\n                msg: e.response.statusText,\n                status: e.response.status,\n            },\n        });\n    }\n}\n\nexport const addNomination = (newNominatedMovie: Movie, dispatch: Dispatch<myAction>) => {\n    try {\n        dispatch({\n            type: ADD_NOMINATION,\n            payload: newNominatedMovie,\n        });\n\n        dispatch({\n            type: REFRESH_LOCAL_STORAGE,\n            payload: {}\n        })\n\n    } catch (e) {\n        dispatch({\n            type: MOVIE_ERROR,\n            payload: {\n                msg: e,\n            },\n        });\n    }\n}\n\n\nexport const removeNomination = (newNominatedMovie: Movie, dispatch: Dispatch<myAction>) => {\n    try {\n        dispatch({\n            type: REMOVE_NOMINATION,\n            payload: newNominatedMovie,\n        });\n\n        dispatch({\n            type: REFRESH_LOCAL_STORAGE,\n            payload: {}\n        })\n    } catch (e) {\n        dispatch({\n            type: MOVIE_ERROR,\n            payload: {\n                msg: e,\n            },\n        });\n    }\n}\n\nexport const removeAllNomination = (dispatch: Dispatch<myAction>) => {\n    try {\n        dispatch({\n            type: REMOVE_ALL_NOMINATION,\n            payload: null\n        });\n\n        dispatch({\n            type: REFRESH_LOCAL_STORAGE,\n            payload: {}\n        })\n    } catch (e) {\n        dispatch({\n            type: MOVIE_ERROR,\n            payload: {\n                msg: e,\n            },\n        });\n    }\n}\n\nexport const loadNominatedMovies = (dispatch: Dispatch<myAction>) => {\n    try {\n        if (localStorage.nominatedMovies) {\n            const nominated: Array<Movie> = JSON.parse(localStorage.getItem(\"nominatedMovies\") || \"[]\");\n            dispatch({\n                type: LOAD_NOMINATED_MOVIES,\n                payload: nominated,\n            })\n        }\n    } catch (e) {\n        dispatch({\n            type: LOAD_NOMINATED_MOVIES_ERROR,\n            payload: {\n                msg: e,\n            },\n        });\n    }\n}\n","import React, {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {getMovies} from \"../actions/movieAction\";\nimport Button from '@material-ui/core/Button';\nimport {Box, Card, CardContent, Grid, InputAdornment, SvgIcon, TextField} from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst SearchMovieInput = () => {\n    const [movieTitle, setMovieTitle] = useState('');\n    const dispatch = useDispatch();\n\n    const submitInput = async (event: React.SyntheticEvent) => {\n        event.preventDefault();\n        await getMovies(movieTitle, 1, dispatch);\n    }\n\n    return (\n        <div style={{margin: \"20px\",width:'100%'}}>\n            <React.Fragment>\n                <Box>\n                    <Card style={{marginTop: \"20px\"}}>\n                        <form onSubmit={submitInput}>\n                            <CardContent>\n                                <Grid container>\n                                    <Grid item lg={12} sm={12} xl={12} xs={12}>\n                                        <Box style={{width: \"100%\"}}>\n                                            <TextField\n                                                required\n                                                label=\"movie title\"\n                                                fullWidth\n                                                InputProps={{\n                                                    startAdornment: (\n                                                        <InputAdornment position=\"start\">\n                                                            <SvgIcon\n                                                                fontSize=\"small\"\n                                                                color=\"action\"\n                                                            >\n                                                                <SearchIcon/>\n                                                            </SvgIcon>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                onChange={(event) => {\n                                                    setMovieTitle(event.target.value)\n                                                }}\n                                                placeholder=\"Search a movie\"\n                                                variant=\"outlined\"\n                                                value={movieTitle}\n                                            />\n                                            <Button variant=\"contained\" color=\"primary\" type=\"submit\" value=\"Submit\"\n                                                    style={{\n                                                        textTransform: 'none',\n                                                        float: 'left',\n                                                        marginTop: \"10px\"\n                                                    }}>Search</Button>\n                                        </Box>\n                                    </Grid>\n                                    <Grid>\n                                        <Box>\n\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </CardContent>\n                        </form>\n                    </Card>\n                </Box>\n            </React.Fragment>\n        </div>\n    );\n}\n\nexport default SearchMovieInput;","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppState} from \"../store/AppState\";\nimport React from \"react\";\nimport {addNomination, getMovies, Movie} from \"../actions/movieAction\";\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport {\n    Card,\n    CardHeader,\n    Divider,\n    IconButton,\n    Typography\n} from \"@material-ui/core\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nconst SearchResults = () => {\n    const _movies = useSelector((state: AppState) => state.movies);\n    const movies: Array<Movie> = _movies['movieSearched'];\n    const nominations: Array<Movie> = _movies['movieNominated'];\n    const {pageNum, pageSize, totalResults, searchInput} = useSelector((state: AppState) => state.movies);\n    const dispatch = useDispatch();\n    //const {enqueueSnackbar, closeSnackbar} = useSnackbar();\n    const onClickNextPage = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (pageNum * pageSize >= totalResults) {\n            //TODO alert \"last page\"\n        }\n        await getMovies(searchInput, pageNum + 1, dispatch);\n    }\n\n    const onClickPrePage = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        await getMovies(searchInput, pageNum - 1, dispatch);\n    }\n\n    const renderNominationButton = (mov: Movie) => {\n        if (nominations.length < 5 && !nominations.some((item) => {\n            return item.imdbID === mov.imdbID\n        })) {\n            return (\n                <Button variant=\"contained\" color=\"primary\" style={{textTransform: 'none'}}\n                        onClick={() => addNomination(mov, dispatch)}>Nominate</Button>\n            )\n        } else {\n            return null;\n        }\n    }\n\n    const cardHeaderText = (): String => {\n        if (searchInput !== \"\") {\n            return `Results for \"${searchInput}\"`\n        } else {\n            return \"Results\"\n        }\n    }\n\n    // const msgSuccess = () => {\n    //     enqueueSnackbar('Success get data from API');\n    // }\n\n    return (\n        <div style={{margin: \"20px\"}}>\n            <React.Fragment>\n                <Card style={{marginTop: \"20px\"}}>\n                    <div slot=\"header\" style={{textAlign: 'left'}}>\n                        <CardHeader\n                            title={cardHeaderText()}\n                            action={\n                                <div style={{justifyContent: 'space-between', display: 'flex'}}>\n                                    <div style={{\n                                        display: 'flex',\n                                        justifyContent: 'center',\n                                        alignItems: 'center'\n                                    }}>\n                                        <Typography align=\"center\">\n                                            {`${pageNum} / ${Math.floor((totalResults / pageSize) + 1)} - ${totalResults}`}\n                                        </Typography>\n                                    </div>\n                                    <div style={{}}>\n                                        <IconButton color=\"primary\" onClick={onClickPrePage} aria-label=\"pre page\">\n                                            <ArrowBackIcon/>\n                                        </IconButton>\n                                    </div>\n                                    <div style={{}}>\n                                        <IconButton color=\"primary\" onClick={onClickNextPage} aria-label=\"next page\">\n                                            <ArrowForwardIcon/>\n                                        </IconButton>\n                                    </div>\n                                </div>\n                            }\n                        />\n                    </div>\n                    <Divider/>\n                    {movies.length !== 0 && (\n                        <List>\n                            {movies.map((mov, index) => (\n                                <ListItem\n                                    divider={index < movies.length - 1}\n                                    key={mov.imdbID}\n                                >\n                                    <ListItemAvatar>\n                                        <Avatar src={mov.poster}/>\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={mov.title}\n                                        secondary={`Posted on ${mov.yearOfLease}`}\n                                    />\n                                    <ListItemSecondaryAction>\n                                        {renderNominationButton(mov)}\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            ))}\n                        </List>)}\n                </Card>\n            </React.Fragment>\n        </div>\n\n    );\n\n};\nexport default SearchResults;","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppState} from \"../store/AppState\";\nimport {Movie, removeAllNomination, removeNomination} from \"../actions/movieAction\";\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport {Card, CardHeader, Divider, IconButton} from \"@material-ui/core\";\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\n\nconst NominatedMovies = () => {\n    const _movies = useSelector((state: AppState) => state.movies);\n    const dispatch = useDispatch();\n    const nominations: Array<Movie> = _movies['movieNominated'];\n    const deleteAllNominatedMovies = () => {\n        removeAllNomination(dispatch);\n    }\n\n    return (\n        <div style={{margin: '20px'}}>\n            <React.Fragment>\n                <Card style={{marginTop: \"20px\"}}>\n                    <CardHeader\n                        // subtitle={`${products.length} in total`}\n                        title=\"Nominated Movies\"\n                        style={{textAlign: \"left\"}}\n                        action={\n                            <div>\n                                <IconButton color=\"secondary\" onClick={deleteAllNominatedMovies} aria-label=\"clear\">\n                                    <DeleteSweepIcon/>\n                                </IconButton>\n                            </div>\n\n                        }\n                    />\n                    <Divider/>\n                    {nominations.length !== 0 && (\n                        <List>\n                            {nominations.map((mov, index) => (\n                                <ListItem\n                                    divider={index < nominations.length - 1}\n                                    key={mov.imdbID}\n                                >\n                                    <ListItemAvatar>\n                                        <Avatar src={mov.poster}/>\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={mov.title}\n                                        secondary={`Posted on ${mov.yearOfLease}`}\n                                    />\n                                    <ListItemSecondaryAction>\n                                        <Button variant=\"contained\" color=\"secondary\" style={{textTransform: 'none'}}\n                                                onClick={() => removeNomination(mov, dispatch)}>\n                                            Remove\n                                        </Button>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            ))}\n                        </List>)}\n                </Card>\n            </React.Fragment>\n        </div>\n    )\n}\n\nexport default NominatedMovies;","import {AppBar, Icon, Toolbar, Typography} from \"@material-ui/core\";\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\n\nconst Navbar = () => {\n    return (\n        <AppBar position=\"static\"\n                elevation={0}\n        >\n            <Toolbar style={{height: 20}}>\n                <Icon>\n                    <TrackChangesIcon/>\n                </Icon>\n\n                <Typography variant=\"h3\" color=\"inherit\">\n                    &nbsp; The Shoppies\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Navbar;","import {connect, useDispatch, useSelector} from \"react-redux\";\nimport {AppState} from \"../store/AppState\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport React, {useEffect, useRef} from \"react\";\nimport {CloseMessage, messageObj} from \"../actions/MessageAction\";\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\nimport {VariantType, useSnackbar} from 'notistack';\nimport PropTypes from \"prop-types\";\nimport {Container} from \"@material-ui/core\";\n\nconst Message = (props: any) => {\n    const _messages = useSelector((state: AppState) => state.messages);\n    const messages: Array<messageObj> = _messages ? _messages['messageArray'] : [];\n    //const messages: Array<messageObj> = props.messages !== undefined ? props.messages : [];\n    console.log(\"messages\", messages)\n    const {enqueueSnackbar} = useSnackbar();\n\n    console.log(\"rendering\")\n    const addMessage = (message: string, variant: VariantType) => {\n        console.log(\"add message\")\n        enqueueSnackbar(message, {variant})\n    }\n\n    return (\n        <div>\n            {messages !== null && messages.length > 0 && (<div>\n                {messages.map((item, index) => {\n                    return <Container>\n                        <div key={item.id} style={{margin: '20px'}} className={`alert alert-${item.alertType}`}>\n                            {item.message}\n                        </div>\n                    </Container>\n                    //enqueueSnackbar(messages[0].message);\n                })}\n            </div>)}\n            {/*{messages[0].message}*/}\n            {/*{messages.length !== 0 && (messages.map((msg, index) => (*/}\n            {/*        <div key={index}>*/}\n            {/*            {addMessage(msg.message, msg.alertType)};*/}\n            {/*        </div>*/}\n            {/*    )*/}\n            {/*))*/}\n            {/*}*/}\n        </div>\n    )\n}\n\nMessage.propTypes =\n    {\n        alerts: PropTypes.array.isRequired,\n    }\n;\n\nconst mapStateToProps = (state: any) => (\n    {\n        messages: state.messageArray,\n    }\n);\n\nexport default connect(mapStateToProps)(Message);","import React, {useEffect} from 'react';\nimport './App.css';\nimport SearchMovieInput from \"./components/SearchMovieInput\";\nimport SearchResults from \"./components/SearchResults\";\nimport NominatedMovies from \"./components/NominatedMovies\";\n\nimport {Container, Grid} from '@material-ui/core';\n\nimport Navbar from \"./layout/Navbar\";\nimport Message from \"./layout/Message\";\nimport {loadNominatedMovies} from \"./actions/movieAction\";\nimport {useDispatch} from \"react-redux\";\n\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        loadNominatedMovies(dispatch);\n    });\n\n\n    return (\n        <React.Fragment>\n            <Navbar/>\n            <Message/>\n            <Container style={{margin: 'auto'}}>\n                <div style={{justifyContent: 'center', display: 'flex'}}>\n                    <SearchMovieInput/>\n                </div>\n                <div style={{justifyContent: 'center', display: 'flex'}}>\n                    <Grid container>\n                        <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                            <SearchResults/>\n                        </Grid>\n                        <Grid item xl={6} lg={6} md={6} sm={12} xs={12}>\n                            <NominatedMovies/>\n                        </Grid>\n                    </Grid>\n                </div>\n            </Container>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const USER_TYPE = \"USER_TYPE\";\n\nexport interface User {\n    id: string;\n    username: string;\n    email: string;\n    city: string;\n}\n\nexport interface UserAction {\n    type: string;\n    payload: User | null;\n}\n\nexport const UserReducer = (state: User | null = null, action: UserAction): User | null => {\n    switch (action.type) {\n        case USER_TYPE:\n            console.log(\"user reducer\", action.payload);\n            return action.payload;\n        default:\n            return state;\n    }\n}","import {\n    ADD_NOMINATION, LOAD_NOMINATED_MOVIES,\n    LOAD_NOMINATED_MOVIES_ERROR,\n    MOVIE_ERROR, REFRESH_LOCAL_STORAGE,\n    REMOVE_ALL_NOMINATION,\n    REMOVE_NOMINATION,\n    SEARCH_MOVIE\n} from \"../actions/types\";\nimport {Movie} from \"../actions/movieAction\";\n\n\nexport interface MovieAction {\n    type: string;\n    payload: any;\n}\n\nconst initialMovieState = {\n    movieSearched: [],\n    movieNominated: [],\n    searchInput: \"\",\n    pageNum: 1,\n    pageSize: 10,\n    totalResults: 0,\n    error: {},\n}\n\nexport const MovieReducer = (state: any | null = initialMovieState, action: MovieAction) => {\n    const {type, payload} = action;\n    //console.log(\"payload\", payload);\n    switch (type) {\n        case SEARCH_MOVIE:\n            return {\n                ...state,\n                movieSearched: payload.movieItems,\n                pageNum: payload.newPageNum,\n                totalResults: payload.totalResults,\n                searchInput: payload.searchInput,\n            }\n        case ADD_NOMINATION:\n            return {\n                ...state,\n                movieNominated: [...state.movieNominated, payload],\n            }\n        case REMOVE_NOMINATION:\n            return {\n                ...state,\n                movieNominated: state.movieNominated.filter((mov: Movie) => {\n                        return mov !== payload;\n                    }\n                )\n            }\n        case REMOVE_ALL_NOMINATION:\n            return {\n                ...state,\n                movieNominated: []\n            }\n        case REFRESH_LOCAL_STORAGE:\n            localStorage.setItem(\"nominatedMovies\", JSON.stringify(state.movieNominated));\n            return state;\n        case LOAD_NOMINATED_MOVIES:\n            return {\n                ...state,\n                movieNominated: payload,\n            }\n        case LOAD_NOMINATED_MOVIES_ERROR:\n        case MOVIE_ERROR:\n            return {\n                ...state,\n                error: payload,\n            }\n        default:\n            return state;\n    }\n}\n","import {addMsgAction, closeMsgAction, messageObj} from \"../actions/MessageAction\";\n\nexport interface messageState {\n    messageArray: Array<addMsgAction[\"payload\"]>;\n}\n\nconst initialMessageState = {\n    messageArray: [],\n}\n\nexport const MessageReducer = (state: messageState = initialMessageState, action: addMsgAction | closeMsgAction) => {\n    const {type, payload} = action;\n    //console.log(payload);\n    switch (type) {\n        case \"ADD_MESSAGE\":\n            return {\n                ...state,\n                messageArray: [...state.messageArray, payload],\n            }\n        case \"REMOVE_MESSAGE\":\n            return {\n                ...state,\n                messageArray: state.messageArray.filter((msgObj: messageObj) => {\n                    return msgObj.id !== payload;\n                })\n            }\n        default:\n            return state\n    }\n}","import {combineReducers} from \"redux\";\nimport {UserReducer} from \"../reducers/UserReducers\";\nimport {MovieReducer} from \"../reducers/MovieReducer\";\nimport {MessageReducer} from \"../reducers/MessageReducer\";\n\nexport const rootReducer = combineReducers({\n    user: UserReducer,\n    movies: MovieReducer,\n    messages: MessageReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;","import {createStore} from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {rootReducer} from \"./AppState\";\n\nconst initialState = {};\n\nconst configureStore = () => {\n    return createStore(rootReducer, initialState,composeWithDevTools());\n}\n\nexport default configureStore;","import {colors, createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#339df1\",\n            contrastText: \"#fff\",\n        },\n        background: {\n            default: '#F4F6F8',\n            paper: colors.common.white\n        },\n        text: {\n            primary: '#172b4d',\n            secondary: '#6b778c',\n        }\n    },\n    typography: {\n        h1: {\n            fontWeight: 500,\n            fontSize: 35,\n            letterSpacing: '-0.24px'\n        },\n        h2: {\n            fontWeight: 500,\n            fontSize: 29,\n            letterSpacing: '-0.24px'\n        },\n        h3: {\n            fontWeight: 500,\n            fontSize: 24,\n            letterSpacing: '-0.06px'\n        },\n        h4: {\n            fontWeight: 500,\n            fontSize: 20,\n            letterSpacing: '-0.06px'\n        },\n        h5: {\n            fontWeight: 500,\n            fontSize: 16,\n            letterSpacing: '-0.05px'\n        },\n        h6: {\n            fontWeight: 500,\n            fontSize: 14,\n            letterSpacing: '-0.05px'\n        },\n        overline: {\n            fontWeight: 500\n        }\n    }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport configureStore from \"./store/configureStore\";\nimport {SnackbarProvider} from \"notistack\";\nimport {theme} from \"./theme/myTheme\";\nimport {ThemeProvider} from \"@material-ui/core/styles\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={configureStore()}>\n            <SnackbarProvider maxSnack={3}>\n                <ThemeProvider theme={theme}>\n                    <App/>\n                </ThemeProvider>\n            </SnackbarProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}